https://www.youtube.com/watch?v=wmDs9D3aBHk
Aprenda a usar o Docker Compose
Fabrício Veronez DevOps Pro

1 - criar network
> docker network create cadastro_net
> docker network ls

2 - criar os volumes
> docker volume create mysql_vol
> docker volume create php-app_vol

3 - criar os containers
3.1. container mysql:
3.1.1) gerar a imagem para o container mysql
    > docker build -t szalbuque/cadastro-db .  
3.1.2.) gerar o container mysql
    > docker run --name db -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=12345 -e MYSQL_DATABASE=cadastro -e MYSQL_USER=MainUser -e MYSQL_PASSWORD=MainPassword szalbuque/cadastro-db
    > docker container ls                                                                            CONTAINER ID   IMAGE                   COMMAND                  CREATED         STATUS         PORTS                               NAMES
    acdd90d9147c   szalbuque/cadastro-db   "docker-entrypoint.s…"   6 seconds ago   Up 5 seconds   33060/tcp, 0.0.0.0:3307->3306/tcp   db
    (entrei no container e executei o banco de dados - ok)
3.2. container apache+php com os arquivos da minha aplicação
3.2.1) imagem a utilizar: php:7.2-apache
    a) gerar a imagem com a aplicação (ver /html/dockerfile)
    > docker build -t szalbuque/php-app:1.0 .
    b) gerar o container a partir desta imagem:docker container run -d --name cadastro-app -p 8080:80 --network cadastro_net szalbuque/php-app:1.0 .
    > docker run -d -p 8081:80 szalbuque/php-app:1.0
    Rodou no navegador (localhost:8081), mas deu erro pq não tem a classe mysqli
    Fatal error: Uncaught Error: Class 'MySQLi' not found in /var/www/html/config.php:16 Stack trace: #0 /var/www/html/index.php(36): include() #1 {main} thrown in /var/www/html/config.php on line 16
    Depois que fiz as alterações no dockerfile, o erro mudou para:
    Warning: mysqli::__construct(): (HY000/2002): Connection refused in /var/www/html/config.php on line 16
    Rodei o comando:
    > docker inspect db (para ver as configurações do container do banco de dados)
    Ele tem o IP: 172.17.0.2 e expõe a porta 3307
    Inspecionei também o container php. Ele usa o IP 172.17.0.3 e expõe a porta 8081.
    Rodei o comando:
    > docker run  -p 8081:80 -e MYSQL_HOST=172.17.0.2 -e MYSQL_ROOT_PASSWORD=12345 szalbuque/php-app:1.0
    Mas parece que ele está tentando usar o mysql dentro do próprio container da aplicação.
    ====================
    Vou tentar acessar o banco de dados do container db com um container phpmyadmin.
    Vou usar a imagem oficial do phpmyadmin com apache (docker pull phpmyadmin:apache).
    Vai publicar o phpMyAdmin em http://localhost:8080 .
    > docker run --name phpmyadmin -d --link db:cadastro -p 8080:80 -e PMA_PORT=3307 -e MYSQL_ROOT_PASSWORD=12345 phpmyadmin
    Funcionou!
    ===================
    Vou copiar os arquivos da aplicação para a pasta padrão do Apache e testar a aplicação.
    Para direcionar a execução do Apache para o meu site, preciso alterar o arquivo que está em: /etc/apache2/sites-enabled/000-default.conf
    Alterei a linha  DocumentRoot /var/www/html/crud/html
    Porém voltou a dar erro de conexão
    Alterei a linha novamente para DocumentRoot /var/www/html e reiniciei o Apache. O Phpmyadmin voltou a funcionar.
    Procurar a configuração da conexão do phpmyadmin.
    Percebi que o phpmyadmin estava fazendo a conexão pela porta 3306 do servidor mysql (apesar de estar exposta a 3307).
    Entrei no arquivo /var/www/html/crud/html/config.php e alterei a porta.
    Testei diretamente usando o navegador com o endereço: http://localhost:8080/crud/html/index.php?page=listar
    Funcionou!!
    ==========================
    O ideal seria colocar um nginx na frente desses containers, direcionando uma rota para o Phpmyadmin e outra para a aplicação.
    Porém vou deixar assim, pois é apenas um exercício de criação das imagens dos containers que desejo usar depois.
    ==========================
    Na verdade, como não preciso do phpmyadmin, vou trocar a pasta padrão do Apache, para ir direto para a aplicação.
    Não será um container otimizado, porque tem mais arquivos do que precisa realmente.
    Porém a imagem servirá para fazer os testes com o docker-compose e o kubernetes.
    Também posso fazer o teste usando como base a imagem do php-apache (sem o phpmyadmin). 
    Eu tinha rodado direto a imagem do phpmyadmin apenas para testar a conexão com o container do mysql.
    =========================
    Corrigi o dockerfile para rodar a atualização e instalação do mysqli.
    Recriei a imagem e o container.
    Funcionou! 